
import { _decorator, Component, input, Node, game, director, NodeEventType, UITransform, tween, Tween, Label, SceneAsset, profiler } from 'cc';
import '../FrameWork/Global';
import '../FrameWork/Utilities/Predefined';
import '../FrameWork/AutoGenerated/Modules';
import { GameManger } from '../FrameWork/GameManager';
import { Window_C } from '../FrameWork/Windows/WindowMgr';
import loginWindow from '../FrameWork/Windows/loginWindow';
import startWindow from '../FrameWork/Windows/startWindow';
import { TestConfig } from '../FrameWork/Configs/TestConfig';
import { HAHAHConfig } from '../FrameWork/Configs/HAHAHConfig';
import { ConfigMgr } from '../FrameWork/Configs/ConfigMgr';
import { AudioMgr } from '../FrameWork/Audio/AudioMgr';
import { GameTimeSys } from './GameTimeSys';
const { ccclass, property } = _decorator;


@ccclass('Launch')
export class Launch extends Component {
    @property({ type: Node, visible: true })
    public UIRoot: Node;

    @property({ type: Node, visible: true })
    public LoadWindow: Node;

    private m_loadBar: Node;
    private m_loadPreTxt: Label;
    private m_totalProgress = 0; // 总进度
    private m_taskCount = 2; // 任务数量
    private m_maxWidth = 400;
    private m_SceneAsset:SceneAsset =null;
    onLoad() {
        
        if(!__DEBUG){
            profiler.hideStats();
        }
        director.addPersistRootNode(this.node);
        __g.GameManger = new GameManger();
        __g.GameManger.InitModule();
        __g.__GameManger = __g.GameManger;
        __g.__GameTimeSys= new GameTimeSys();
        __g.__GameTimeSys.SetTimeNode(this.node.getChildByName("GameTimeSys"));

        Window_C.SetUIRoot(this.UIRoot);
        director.addPersistRootNode(this.UIRoot);
        this.m_loadBar = this.LoadWindow.getChildByName("progressBar");
        this.m_loadPreTxt = this.LoadWindow.getChildByName("loadTipTxt").getComponent(Label);

        AudioMgr.inst;

        this.StartLoad();
    }

    StartLoad(): void {
        let barTran: UITransform = this.m_loadBar.getComponent(UITransform);
        barTran.width = 0; // 设置宽度为 200
        this.SetLoadProGress(0);
        this.loadGameScene();
        let oldTotalProgress = this.m_totalProgress;
        let tw: Tween<UITransform>;
        let callback = () => {
            if (ConfigMgr.GetHasLoadComplete()) {
                this.m_totalProgress = 1;
                this.StartTween(tw, barTran);
                this.unschedule(callback);
                this.scheduleOnce(function () {
                   
                    Window_C.Show<startWindow>(startWindow).then(()=>{
                        this.LoadWindow.destroy();
                        director.loadScene("Scene/sceneStart");

                    });

                }, 1.2);
            }
            if (this.m_totalProgress != oldTotalProgress) {
                oldTotalProgress = this.m_totalProgress;
                tw = this.StartTween(tw, barTran);
                //console.log("this.StartTween");
            }
        }
        this.schedule(callback, 0.5);
    }


    private StartTween(tw: Tween<UITransform>, barTran: UITransform): Tween<UITransform> {
        if (tw)
            tw.stop();
        let tarVal = this.m_totalProgress * this.m_maxWidth;
        tw = tween(barTran)
            .to(0.5, { width: tarVal }, {
                onUpdate: (_, ratio) => {
                    this.SetLoadProGress(parseFloat(((barTran.width / this.m_maxWidth) * 100).toFixed(2)));
                }
            })
            .start();
        return tw;
    }

    private SetLoadProGress(val: number): void {
        this.m_loadPreTxt.string = val + '%';
    }

    loadGameScene() {
        let oldThis = this;
        director.preloadScene("Scene/sceneStart", (completedCount, totalCount, item) => {
            var percent = completedCount / totalCount / this.m_taskCount;
            //console.log("percent:"+percent);
            this.m_totalProgress = percent;
            // console.log("this.m_totalProgress:"+this.m_totalProgress);
        }, function (error, asset) {
            if (!error) {
                console.log('=== success to load scene ===');
                oldThis.m_SceneAsset=asset;
                oldThis.loadGameConfig();
            } else {
                console.error('Failed to load scene', error);
            }
        });
    }

    /**
     * 加载配置表
     */
    loadGameConfig() {
        ConfigMgr.LoadAllConfig();
    }

    start() {

        setTimeout(() => {
            let cf: TestConfig = TestConfig.Get(2);
            console.log("ID" + 2);
            let cf2: HAHAHConfig = HAHAHConfig.Get("20");
            console.log("cf2" + cf2.ID);
            console.log("desc" + cf2.desc);
        }, 2000);
    }

    update(deltaTime: number) {

    }
}


